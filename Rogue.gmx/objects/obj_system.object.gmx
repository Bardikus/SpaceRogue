<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Main Grid</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//------------SEED VARIABLES-----------------------------
randomize(); // randomize with different seed each time
//--------------------------------------------------------

//------SURFACE---------------------------------------
globalvar lightON;
          lightON = true;
//global.light = surface_create(room_width,room_height);
//----------------------------------------------------



//------PAUSE------------
globalvar pauseVariable;
          pauseVariable = 1;
globalvar pause;
          pause = 1;
//-----------------------

//-----STOP WEAPON ROTATION DRAW IN PAUSE VARIABLES------
globalvar lastMouseX;
          lastMouseX = 0;
globalvar lastMouseY;
          lastMouseY = 0;
//--------------------------------------------------

//-----------INSIDE ROOM VARIABLES------------------------------

globalvar roomLayoutChanged;
          roomLayoutChanged = false;

//--------------------------------------------------------------

//-----------DUNGEON ROOM PATH GENERATION VARIABLES----------------------------------------------------------
globalvar xArrayStart, yArrayStart, xArrayFinish, xArrayFinish; // start and finish room positions
          xArrayStart  = 0;
          xArrayFinish = 0;
          yArrayStart  = 0;
          yArrayFinish = 0;
globalvar nextDirection; // boolean that alternates filling 1s between the x and the y axis
          nextDirection = power(-1, irandom(2));
globalvar xDistance, yDistance; // hor and ver diff between start and finish rooms
globalvar sign_xDistance, sign_yDistance; // signs(+ or -) of the hor and ver diff
//---------------------------------------------------------------------------------------------------


//---MINIMAP VARIABLES----------------------------------------------------------
globalvar swapMiniMapInfo; //DEBUG variable for switching between minimap values
          swapMiniMapInfo = -1;
globalvar arrayCellSize;
          arrayCellSize   =  5;
globalvar xMapPlayer, yMapPlayer; //current player position on the minimap

//------------------------------------------------------------------------------


//--------2D ROOM ARRAY-----------------------------------------------------
//roomArrayH = room_width div arrayCellSize;
//roomArrayH = room_height div arrayCellSize; 

globalvar nrOfRooms;
          nrOfRooms = 9;
globalvar roomArrayW;
globalvar roomArrayH;
roomArrayW = 10; // width  of grid in cells
roomArrayH = 10; // height of grid in cells
globalvar roomArray;
for (i = 0; i &lt; roomArrayW; i++)
{
    for(j = 0; j &lt; roomArrayH; j++)
    {
        roomArray[i,j] = instance_create(i, j, obj_room);
        roomArray[i,j].roomLayout = "rm_1_1";
    }
}
script_execute(scr_GenerateDungeon);
//--------------------------------------------------------------------------

//-----------------DELTA TIME------------------------------------------------
globalvar delta;
          delta = 1
//---------------------------------------------------------------------------


//--------------------------PLAYER-------------------------------------------
//-------MOVEMENT SPEED------------------
global.playerMoveSpeed = 0;
global.playerFrictionFactor = 0.15;
global.playerGainSpeed = 0.3;
global.playerTopSpeed  = 1.5;
global.playerIsMoving = false;
//---------------------------------------

//-------HEALTH POINTS-------------------
globalvar playerHP;
          playerHP         = 8
globalvar playerCanTakeDmg;
          playerCanTakeDmg = true
globalvar playerDmgCd;
          playerDmgCd      = 60;
//---------------------------------------

//----- WEAPONS--------------------------
global.pistol_Bullet_Speed      = 5
global.pistol_Bullet_Dmg        = 3;
global.pistol_Bullet_cd         = 20
global.canShootPistol           = true

global.rifle_Bullet_Speed       = 4
global.rifle_Bullet_Dmg         = 0.85;
global.rifle_Bullet_cd          = 6
global.canShootRifle            = true

global.shotgun_Bullet_Speed     = 3
global.shotgun_Bullet_Dmg       = 2;
global.shotgun_Bullet_cd        = 40
global.canShootShotgun          = true

global.RPG_Bullet_Speed         = 5
global.RPG_Bullet_Dmg           = 10;
global.RPG_Bullet_cd            = 100;
global.canShootRPG              = true
//---------------------------------------- 
//---------------------------------------------------------------------------



//-----OXYGEN----------------------------------------------------------------
globalvar oxygenLevel;
          oxygenLevel        = 100;
globalvar oxygenLevelInitial;
          oxygenLevelInitial = oxygenLevel;          
globalvar oxygenRate;
          oxygenRate         = 0.1;
globalvar oxygenCanDmg;
          oxygenCanDmg       = true;
//---------------------------------------------------------------------------



//----HAZARDS----------------------------------------------------------------

//Grid for Pathfinding AI
globalvar AI_grid;
          AI_grid = mp_grid_create(0, 0, 15, 11, 16, 16);


//monster stats
global.monster_FlashTimer       = 2;

global.monster_Goober_hp        = 7;
global.monster_Goober_speed     = 0.4;

global.monster_Burker_hp        = 5;
global.monster_Burker_speed     = 0.7;

globalvar playerHeadStart;
          playerHeadStart       = false;
globalvar alienStartDelay;        
          alienStartDelay       = 60;
global.monster_Alien_hp         = 5;
global.monster_Alien_speed      = 0.5;


//---------------------------------------------------------------------------


//--------DEBUG--------------------------------------------------------------

canDrawFPS = true;

drawAvailable  = false
drawDoorLayout = false
drawRoomLayout = false
drawCleared    = false
drawUnexplored = false
drawNothing    = true
//---------------------------------------------------------------------------
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>playerHeadStart = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oxygenCanDmg = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canDrawFPS = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(pause == 1)
{
    lastMouseX = mouse_x;
    lastMouseY = mouse_y;
    if (instance_exists(obj_player))
    {
        //CALCULATE OXYGEN DRAIN
        if(oxygenLevel &gt; 0 &amp;&amp; roomArray[xMapPlayer, yMapPlayer].cleared == false)
        {
            oxygenLevel -= oxygenRate;
        }
        
        if(oxygenLevel &lt; 1 &amp;&amp; oxygenCanDmg == true)
        {
            oxygenCanDmg = false;
            audio_play_sound(snd_playerHurt, 100, false);
            playerHP -=1
            alarm[1] = 120;
        }
    }
}
if (roomArray[xMapPlayer, yMapPlayer].cleared == true)
{
    oxygenLevel = oxygenLevelInitial;
}

//CHECK IF PLAYER IS ALIVE
if (playerHP &lt; 1)
{
    with(obj_player) instance_destroy()
}

//MARK ROOM CLEARED
if(instance_number(obj_hazard) &lt; 1)
{
    with (instance_nearest(x, y, obj_LockedDoor)) instance_destroy();
    with (instance_nearest(x, y, obj_LockedDoorTop)) instance_destroy();  
    global.roomArray[global.xMapPlayer,global.yMapPlayer].cleared = true; 
}
//PLAY PLAYER WALK SOUND
//if (global.playerIsMoving == true)

//------------DEBUG VARIABLES------------------
if(keyboard_check_pressed(vk_f1))
{
    drawAvailable  = true
    drawDoorLayout = false
    drawRoomLayout = false
    drawCleared    = false
    drawUnexplored = false
    drawNothing    = false
}
if(keyboard_check_pressed(vk_f2))
{
    drawAvailable  = false
    drawDoorLayout = true
    drawRoomLayout = false
    drawCleared    = false
    drawUnexplored = false
    drawNothing    = false    
}
if(keyboard_check_pressed(vk_f3))
{
    drawAvailable  = false
    drawDoorLayout = false
    drawRoomLayout = true
    drawCleared    = false
    drawUnexplored = false
    drawNothing    = false
}
if(keyboard_check_pressed(vk_f4))
{
    drawAvailable  = false
    drawDoorLayout = false
    drawRoomLayout = false
    drawCleared    = true
    drawUnexplored = false
    drawNothing    = false
}
if(keyboard_check_pressed(vk_f5))
{
    drawAvailable  = false
    drawDoorLayout = false
    drawRoomLayout = false
    drawCleared    = false
    drawUnexplored = true
    drawNothing    = false
}
if(keyboard_check_pressed(vk_f12))
{
    drawAvailable  = false
    drawDoorLayout = false
    drawRoomLayout = false
    drawCleared    = false
    drawUnexplored = false
    drawNothing    = true
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(scr_GenerateDungeon);
room_goto(rm_MENU);
with(obj_player) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(scr_placeDoors)

playerHeadStart = false;
alarm[2] = alienStartDelay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -1000

//MAXIMIZE GUI by 4 (same number we multiplied the view of the room by)
display_set_gui_maximise(4, 4, 0, 0);


//DRAW CURSOR
draw_sprite_ext(spr_reticle, image_index, mouse_x, mouse_y, 1, 1, 0, c_white, 1);


//STUFF TO DRAW ONLY OUTSIDE MAIN MENU
if(asset_get_index(room_get_name(room)) != rm_MENU)
{
    //DRAW MINIMAP
    script_execute(scr_drawMiniMap);
    
    //DRAW HEALTH POINTS
    for(i = 0; i &lt; global.playerHP; i++)
        draw_sprite_ext(spr_heart, image_index, x + 182 + i * 6, y + 12, image_xscale /2, image_yscale /2, 0, c_white, 1)
    
    //DRAW OXYGEN TANK
    draw_sprite_ext( spr_oxygen_amount, image_index, x + 182, y + 2,  oxygenLevel / oxygenLevelInitial, 1, 0, c_white, 1 );
    draw_sprite_ext( spr_oxygen_tube,   image_index, x + 182, y + 2,  1,                                1, 0, c_white, 1 );
    
    //DRAW PAUSE
    if(pause == 0)
    {
         draw_sprite(spr_pause, image_index, 120, 130);
    }
    
    //DRAW DEAD TEXT
    ww = window_get_width()
    wh = window_get_height()
    if (playerHP &lt; 1 )
    {
        draw_sprite_ext(spr_deadText, image_index, 120, 130, image_xscale, image_yscale, 0, c_white, 1)
    }
}
    
//-----DEBUG VALUES------------------------------------------------

//---DISPLAY FPS---------------------------------
if (canDrawFPS)
{
    canDrawFPS = false;
    alarm[0] = 20;
    fpsDRAW = fps_real;  
}
draw_set_font(fnt_fpsFont);
draw_set_color(c_white)
draw_text(1, 50, string(ceil(fpsDRAW)))
//----------------------------------------------

//draw_text(1, 80, string((global.playerIsMoving)))
draw_text(1, 80, string((roomLayoutChanged)))

draw_text(180, 160, string((room_get_name(room))))
//----------------------------------------------------------------



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -1001
if(asset_get_index(room_get_name(room)) != rm_MENU)
{
 if (lightON == true)
 {
    //-----LIGHT------------------------------
    scr_drawLight(room_width  /2, //xPos
                  room_height /2, //yPos
                  120,             //Radius
                  80,              //Precision
                  4);             //Intensity (0 = weak -&gt;255: strong)
    
    //----------------------------------------
 }
}

/*
depth = -999
mp_grid_draw(AI_grid);








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="122">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lightON *= -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="112">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>swapMiniMapInfo *= -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(scr_GenerateDungeon);
script_execute(scr_placeDoors);
script_execute(scr_markNearUnexplored, xMapPlayer, yMapPlayer)
script_execute(scr_resetPlayer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pauseVariable *= -1;

pause = (1 + pauseVariable) / 2


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
